import type { Database, RunResult } from 'better-sqlite3-with-prebuilds';
import { QueueOperationInfo } from './queue_operation_info';
import { STORAGE_NAMES } from '../consts';
import type { DatabaseConnectionCache } from '../database_connection_cache';
import type { RequestModel } from '../resource_clients/request_queue';
export interface RequestQueueEmulatorOptions {
    queueDir: string;
    dbConnections: DatabaseConnectionCache;
}
export interface RawQueueTableData {
    id: string;
    name: string;
    createdAt: string;
    modifiedAt: string;
    accessedAt: string;
    totalRequestCount: number;
    handledRequestCount: number;
    pendingRequestCount: number;
}
export interface RawRequestsTableData {
    queueId: string;
    id: string;
    orderNo: number;
    url: string;
    uniqueKey: string;
    method?: string | null;
    retryCount: number;
    json: string;
}
export declare class RequestQueueEmulator {
    dbPath: string;
    dbConnections: DatabaseConnectionCache;
    db: Database;
    queueTableName: STORAGE_NAMES;
    requestsTableName: string;
    private _selectById;
    private _deleteById;
    private _selectByName;
    private _selectModifiedAtById;
    private _insertByName;
    private _updateNameById;
    private _updateModifiedAtById;
    private _updateAccessedAtById;
    private _adjustTotalAndHandledRequestCounts;
    private _selectRequestOrderNoByModel;
    private _selectRequestJsonByModel;
    private _selectRequestJsonsByQueueIdWithLimit;
    private _insertRequestByModel;
    private _updateRequestByModel;
    private _deleteRequestById;
    private _selectOrInsertTransaction;
    private _addRequestTransaction;
    private _updateRequestTransaction;
    private _deleteRequestTransaction;
    constructor({ queueDir, dbConnections }: RequestQueueEmulatorOptions);
    /**
     * Disconnects the emulator from the underlying database.
     */
    disconnect(): void;
    selectById(id: string | number): RawQueueTableData;
    deleteById(id: string): RunResult;
    selectByName(name: string): RawQueueTableData;
    insertByName(name: string): RunResult;
    selectOrInsertByName(name: string): RawQueueTableData;
    selectModifiedAtById(id: string | number): string;
    updateNameById(id: string | number, name: string): RunResult;
    updateModifiedAtById(id: string | number): RunResult;
    updateAccessedAtById(id: string | number): RunResult;
    adjustTotalAndHandledRequestCounts(id: string, totalAdjustment: number, handledAdjustment: number): RunResult;
    selectRequestOrderNoByModel(requestModel: RequestModel): number | null;
    selectRequestJsonByIdAndQueueId(requestId: string, queueId: string): string;
    selectRequestJsonsByQueueIdWithLimit(queueId: string, limit: number): string[];
    insertRequestByModel(requestModel: RequestModel): RunResult;
    updateRequestByModel(requestModel: RequestModel): RunResult;
    deleteRequestById(id: string): RunResult;
    addRequest(requestModel: RequestModel): QueueOperationInfo;
    updateRequest(requestModel: RequestModel): QueueOperationInfo;
    deleteRequest(id: string): unknown;
    private _createTables;
    private _createTriggers;
    private _createIndexes;
}
//# sourceMappingURL=request_queue_emulator.d.ts.map