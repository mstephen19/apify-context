"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readStreamToString = exports.concatStreamToBuffer = void 0;
/**
 * Concat data from stream to Buffer
 */
async function concatStreamToBuffer(stream) {
    return new Promise((resolve, reject) => {
        const chunks = [];
        stream
            .on('data', (chunk) => {
            chunks.push(chunk);
        })
            .on('error', (e) => reject(e))
            .on('end', () => {
            const buffer = Buffer.concat(chunks);
            return resolve(buffer);
        });
    });
}
exports.concatStreamToBuffer = concatStreamToBuffer;
/**
 * Flushes the provided stream into a Buffer and transforms
 * it to a String using the provided encoding or utf-8 as default.
 */
async function readStreamToString(stream, encoding) {
    const buffer = await concatStreamToBuffer(stream);
    return buffer.toString(encoding);
}
exports.readStreamToString = readStreamToString;
