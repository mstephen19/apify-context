"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerJson = void 0;
const log_consts_1 = require("./log_consts");
const logger_1 = require("./logger");
const DEFAULT_OPTIONS = {
    skipLevelInfo: false,
    skipTime: false,
};
class LoggerJson extends logger_1.Logger {
    constructor(options = {}) {
        super(Object.assign(Object.assign({}, DEFAULT_OPTIONS), options));
    }
    _log(level, message, data, exception, opts = {}) {
        const { prefix, suffix } = opts;
        if (exception)
            data = Object.assign(Object.assign({}, data), { exception });
        if (prefix)
            message = `${prefix}${log_consts_1.PREFIX_DELIMITER} ${message}`;
        if (suffix)
            message = `${message} ${suffix}`;
        // Use short names to save log space.
        // In development mode show more concise log otherwise it's impossible to see anything in it.
        // Message must be shown early for people to see!
        // NOTE: not adding time and host on production, because LogDNA adds it by default and log space is expensive
        const rec = Object.assign({ time: !this.options.skipTime ? new Date() : undefined, level: this.options.skipLevelInfo && level === log_consts_1.LogLevel.INFO ? undefined : log_consts_1.LogLevel[level], msg: message }, data);
        const line = JSON.stringify(rec);
        this._outputWithConsole(level, line);
        return line;
    }
}
exports.LoggerJson = LoggerJson;
