"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const events_1 = __importDefault(require("events"));
const log_consts_1 = require("./log_consts");
/**
 * This is an abstract class that should
 * be extended by custom logger classes.
 *
 * this._log() method must be implemented by them.
 */
class Logger extends events_1.default {
    constructor(options) {
        super();
        this.options = options;
    }
    setOptions(options) {
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
    getOptions() {
        return this.options;
    }
    _outputWithConsole(level, line) {
        switch (level) {
            case log_consts_1.LogLevel.ERROR:
                console.error(line);
                break;
            case log_consts_1.LogLevel.WARNING:
                console.warn(line);
                break;
            case log_consts_1.LogLevel.DEBUG:
                console.debug(line);
                break;
            default:
                console.log(line);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _log(level, message, data, exception, opts = {}) {
        throw new Error('log() method must be implemented!');
    }
    log(level, message, ...args) {
        const line = this._log(level, message, ...args);
        this.emit('line', line);
    }
}
exports.Logger = Logger;
