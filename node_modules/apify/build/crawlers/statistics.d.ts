export default Statistics;
export type StatisticsOptions = {
    logIntervalSecs?: number | undefined;
    logMessage?: string | undefined;
};
/**
 * Format of the persisted stats
 */
export type StatisticPersistedState = {
    requestRetryHistogram: number[];
    statsId: number;
    requestAvgFailedDurationMillis: number;
    requestAvgFinishedDurationMillis: number;
    requestsFinishedPerMinute: number;
    requestsFailedPerMinute: number;
    requestTotalDurationMillis: number;
    requestsTotal: number;
    crawlerRuntimeMillis: number;
    crawlerLastStartTimestamp: number;
    statsPersistedAt: string;
};
/**
 * Contains the statistics state
 */
export type StatisticState = {
    requestsFinished: number;
    requestsFailed: number;
    requestsRetries: number;
    requestsFailedPerMinute: number;
    requestsFinishedPerMinute: number;
    requestMinDurationMillis: number;
    requestMaxDurationMillis: number;
    requestTotalFailedDurationMillis: number;
    requestTotalFinishedDurationMillis: number;
    crawlerStartedAt: Date | string | null;
    crawlerFinishedAt: Date | string | null;
    crawlerRuntimeMillis: number;
    statsPersistedAt: Date | string | null;
};
/**
 * The statistics class provides an interface to collecting and logging run
 * statistics for requests.
 *
 * All statistic information is saved on key value store
 * under the key SDK_CRAWLER_STATISTICS_*, persists between
 * migrations and abort/resurrect
 *
 * @property {StatisticState} state
 *   Current statistic state used for doing calculations on {@link Statistics#calculate} calls
 * @property {number} id
 *   Statistic instance id
 * @property {number[]} requestRetryHistogram
 *   Contains the current retries histogram.
 *   Index 0 means 0 retries, index 2, 2 retries,
 *   and so on
 */
declare class Statistics {
    /**
     * @param {StatisticsOptions} [options]
     * @hideconstructor
     */
    constructor(options?: StatisticsOptions | undefined);
    log: import("@apify/log/log").Log;
    logIntervalMillis: number;
    logMessage: string;
    keyValueStore: import("../storages/key_value_store").KeyValueStore | null;
    id: number;
    persistStateKey: string;
    listener: () => Promise<void>;
    requestRetryHistogram: any[];
    /**
     * @private
     * @type {Object<string|number, Job>}
     */
    private requestsInProgress;
    /**
     * Set the current statistic instance to pristine values
     */
    reset(): void;
    state: {
        requestsFinished: number;
        requestsFailed: number;
        requestsRetries: number;
        requestsFailedPerMinute: number;
        requestsFinishedPerMinute: number;
        requestMinDurationMillis: number;
        requestMaxDurationMillis: number;
        requestTotalFailedDurationMillis: number;
        requestTotalFinishedDurationMillis: number;
        crawlerStartedAt: null;
        crawlerFinishedAt: null;
        statsPersistedAt: null;
        crawlerRuntimeMillis: number;
    } | undefined;
    instanceStart: number | undefined;
    /**
     * Starts a job
     *
     * @param {number|string} id
     * @ignore
     */
    startJob(id: number | string): void;
    /**
     * Mark job as finished and sets the state
     *
     * @param {number|string} id
     * @ignore
     */
    finishJob(id: number | string): void;
    /**
     * Mark job as failed and sets the state
     *
     * @param {number|string} id
     * @ignore
     */
    failJob(id: number | string): void;
    /**
     * Calculate the current statistics
     */
    calculate(): {
        requestAvgFailedDurationMillis: number;
        requestAvgFinishedDurationMillis: number;
        requestsFinishedPerMinute: number;
        requestsFailedPerMinute: number;
        requestTotalDurationMillis: any;
        requestsTotal: any;
        crawlerRuntimeMillis: number;
    };
    /**
     * Initializes the key value store for persisting the statistics,
     * displaying the current state in predefined intervals
     */
    startCapturing(): Promise<void>;
    logInterval: NodeJS.Timer | null | undefined;
    /**
     * Stops logging and remove event listeners, then persist
     */
    stopCapturing(): Promise<void>;
    /**
     * @param {Job} job
     * @ignore
     * @protected
     * @internal
     */
    protected _saveRetryCountForJob(job: Job): void;
    /**
     * Persist internal state to the key value store
     */
    persistState(): Promise<void>;
    /**
     * Loads the current statistic from the key value store if any
     * @ignore
     * @protected
     * @internal
     */
    protected _maybeLoadStatistics(): Promise<void>;
    /**
     * @ignore
     * @protected
     * @internal
     */
    protected _teardown(): void;
    /**
     * Make this class serializable when called with `JSON.stringify(statsInstance)` directly
     * or through `keyValueStore.setValue('KEY', statsInstance)`
     *
     * @returns {StatisticPersistedState & StatisticState}
     */
    toJSON(): StatisticPersistedState & StatisticState;
}
declare namespace Statistics {
    const id: number;
}
/**
 * @ignore
 */
declare class Job {
    lastRunAt: number | null;
    runs: number;
    run(): number;
    finish(): number;
    durationMillis: number | undefined;
    retryCount(): number;
}
//# sourceMappingURL=statistics.d.ts.map