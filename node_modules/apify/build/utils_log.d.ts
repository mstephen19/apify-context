export type LoggerOptions = {
    /**
     * Sets the log level to the given value, preventing messages from less important log levels
     * from being printed to the console. Use in conjunction with the `log.LEVELS` constants.
     */
    level?: number | undefined;
    /**
     * Max depth of data object that will be logged. Anything deeper than the limit will be stripped off.
     */
    maxDepth?: number | undefined;
    /**
     * Max length of the string to be logged. Longer strings will be truncated.
     */
    maxStringLength?: number | undefined;
    /**
     * Prefix to be prepended the each logged line.
     */
    prefix?: string | undefined;
    /**
     * Suffix that will be appended the each logged line.
     */
    suffix?: string | undefined;
    /**
     * Logger implementation to be used. Default one is log.LoggerText to log messages as easily readable
     * strings. Optionally you can use `log.LoggerJson` that formats each log line as a JSON.
     */
    logger?: Logger | undefined;
    /**
     * Additional data to be added to each log line.
     */
    data?: Record<string, unknown> | undefined;
};
export default log;
import { Log } from "@apify/log/log";
import { Logger } from "@apify/log/logger";
import { LogLevel } from "@apify/log/log_consts";
import { LoggerJson } from "@apify/log/logger_json";
import { LoggerText } from "@apify/log/logger_text";
import log from "@apify/log";
export { Log, LogLevel, Logger, LoggerJson, LoggerText };
//# sourceMappingURL=utils_log.d.ts.map