"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.playwrightUtils = exports.gotoExtended = void 0;
const tslib_1 = require("tslib");
const ow_1 = (0, tslib_1.__importDefault)(require("ow"));
const underscore_1 = (0, tslib_1.__importDefault)(require("underscore"));
const utils_log_1 = (0, tslib_1.__importDefault)(require("./utils_log"));
const validators_1 = require("./validators");
/**
 * @typedef {object} DirectNavigationOptions
 * @property {number} [timeout]
 *   Maximum operation time in milliseconds, defaults to 30 seconds, pass `0` to disable timeout. The
 *   default value can be changed by using the browserContext.setDefaultNavigationTimeout(timeout),
 *   browserContext.setDefaultTimeout(timeout), page.setDefaultNavigationTimeout(timeout) or
 *   page.setDefaultTimeout(timeout) methods.
 * @property {("domcontentloaded"|"load"|"networkidle")} [waitUntil]
 *   When to consider operation succeeded, defaults to `load`. Events can be either:
 *     - `'domcontentloaded'` - consider operation to be finished when the `DOMContentLoaded` event is fired.
 *     - `'load'` - consider operation to be finished when the `load` event is fired.
 *     - `'networkidle'` - consider operation to be finished when there are no network connections for at least `500` ms.
 * @property {string} [referer]
 *   Referer header value. If provided it will take preference over the referer header value set by page.setExtraHTTPHeaders(headers).
 */
/**
 * Extended version of Playwright's `page.goto()` allowing to perform requests with HTTP method other than GET,
 * with custom headers and POST payload. URL, method, headers and payload are taken from
 * request parameter that must be an instance of Apify.Request class.
 *
 * *NOTE:* In recent versions of Playwright using requests other than GET, overriding headers and adding payloads disables
 * browser cache which degrades performance.
 *
 * @param {Page} page
 *   Puppeteer [`Page`](https://playwright.dev/docs/api/class-page) object.
 * @param {Request} request
 * @param {DirectNavigationOptions} [gotoOptions] Custom options for `page.goto()`.
 * @return {Promise<(Response|null)>}
 *
 * @memberOf playwright
 * @name gotoExtended
 */
const gotoExtended = async (page, request, gotoOptions = {}) => {
    (0, ow_1.default)(page, ow_1.default.object.validate(validators_1.validators.browserPage));
    (0, ow_1.default)(request, ow_1.default.object.partialShape({
        url: ow_1.default.string.url,
        method: ow_1.default.optional.string,
        headers: ow_1.default.optional.object,
        payload: ow_1.default.optional.any(ow_1.default.string, ow_1.default.buffer),
    }));
    (0, ow_1.default)(gotoOptions, ow_1.default.object);
    const { url, method, headers, payload } = request;
    if (method !== 'GET' || payload || !underscore_1.default.isEmpty(headers)) {
        // This is not deprecated, we use it to log only once.
        utils_log_1.default.deprecated('Using other request methods than GET, rewriting headers and adding payloads has a high impact on performance '
            + 'in recent versions of Playwright. Use only when necessary.');
        let wasCalled = false;
        const interceptRequestHandler = async (route) => {
            try {
                // We want to ensure that this won't get executed again in a case that there is a subsequent request
                // for example for some asset file link from main HTML.
                if (wasCalled) {
                    return await route.continue();
                }
                wasCalled = true;
                const overrides = {};
                if (method !== 'GET')
                    overrides.method = method;
                if (payload)
                    overrides.postData = payload;
                if (!underscore_1.default.isEmpty(headers))
                    overrides.headers = headers;
                await route.continue(overrides);
            }
            catch (error) {
                utils_log_1.default.debug('Error inside request interceptor', { error });
            }
        };
        await page.route('**/*', interceptRequestHandler);
    }
    return page.goto(url, gotoOptions);
};
exports.gotoExtended = gotoExtended;
/**
 * A namespace that contains various utilities for
 * [Playwright](https://github.com/microsoft/playwright) - the headless Chrome Node API.
 *
 * **Example usage:**
 *
 * ```javascript
 * const Apify = require('apify');
 * const { playwright } = Apify.utils;
 *
 * // Navigate to https://www.example.com in Playwright with a POST request
 * const browser = await Apify.launchPlaywright();
 * const page = await browser.newPage();
 * await playwright.gotoExtended(page, {
 *     url: 'https://example.com,
 *     method: 'POST',
 * });
 * ```
 * @namespace playwright
 */
exports.playwrightUtils = {
    gotoExtended: exports.gotoExtended,
};
//# sourceMappingURL=playwright_utils.js.map