export function getEnv(): ApifyEnv;
export function main(userFunc: UserFunc): void;
export function call(actId: string, input?: {
    [x: string]: any;
} | undefined, options?: {
    contentType?: string | undefined;
    token?: string | undefined;
    memoryMbytes?: number | undefined;
    timeoutSecs?: number | undefined;
    build?: string | undefined;
    waitSecs?: number | undefined;
    fetchOutput?: boolean | undefined;
    disableBodyParser?: boolean | undefined;
    webhooks?: AdhocWebhook[] | undefined;
} | undefined): Promise<ActorRun>;
export function callTask(taskId: string, input?: {
    [x: string]: any;
} | undefined, options?: {
    token?: string | undefined;
    memoryMbytes?: number | undefined;
    timeoutSecs?: number | undefined;
    build?: string | undefined;
    waitSecs?: number | undefined;
    webhooks?: AdhocWebhook[] | undefined;
} | undefined): Promise<ActorRun>;
export function metamorph(targetActorId: string, input?: {
    [x: string]: any;
} | undefined, options?: {
    contentType?: string | undefined;
    build?: string | undefined;
} | undefined): Promise<void>;
export function addWebhook(options: {
    eventTypes: EventTypes;
    requestUrl: string;
    payloadTemplate?: string | undefined;
    idempotencyKey?: string | undefined;
}): Promise<WebhookRun | undefined>;
/**
 * Parsed representation of the `APIFY_XXX` environmental variables.
 * This object is returned by the {@link ApifygetEnv } function.
 */
export type ApifyEnv = {
    /**
     * ID of the actor (APIFY_ACTOR_ID)
     */
    actorId: string | null;
    /**
     * ID of the actor run (APIFY_ACTOR_RUN_ID)
     */
    actorRunId: string | null;
    /**
     * ID of the actor task (APIFY_ACTOR_TASK_ID)
     */
    actorTaskId: string | null;
    /**
     * ID of the user who started the actor - note that it might be
     * different than the owner ofthe actor (APIFY_USER_ID)
     */
    userId: string | null;
    /**
     * Authentication token representing privileges given to the actor run,
     * it can be passed to various Apify APIs (APIFY_TOKEN)
     */
    token: string | null;
    /**
     * Date when the actor was started (APIFY_STARTED_AT)
     */
    startedAt: Date | null;
    /**
     * Date when the actor will time out (APIFY_TIMEOUT_AT)
     */
    timeoutAt: Date | null;
    /**
     * ID of the key-value store where input and output data of this
     * actor is stored (APIFY_DEFAULT_KEY_VALUE_STORE_ID)
     */
    defaultKeyValueStoreId: string | null;
    /**
     * ID of the dataset where input and output data of this
     * actor is stored (APIFY_DEFAULT_DATASET_ID)
     */
    defaultDatasetId: string | null;
    /**
     * Amount of memory allocated for the actor,
     * in megabytes (APIFY_MEMORY_MBYTES)
     */
    memoryMbytes: number | null;
};
export type EventTypes = Array<('ACTOR.RUN.SUCCEEDED' | 'ACTOR.RUN.ABORTED' | 'ACTOR.RUN.CREATED' | 'ACTOR.RUN.FAILED' | 'ACTOR.RUN.TIMED_OUT')>;
export type UserFunc = () => Promise<void>;
export type AdhocWebhook = {
    eventTypes: EventTypes;
    requestUrl: string;
    idempotencyKey?: string | undefined;
    payloadTemplate?: string | undefined;
};
export type WebhookRun = {
    id: string;
    createdAt: string;
    modifiedAt: string;
    userId: string;
    isAdHoc: boolean;
    eventTypes: EventTypes;
    condition: any;
    ignoreSslErrors: boolean;
    doNotRetry: boolean;
    requestUrl: string;
    payloadTemplate: string;
    lastDispatch: any;
    stats: any;
};
import { ActorRun } from "./typedefs";
//# sourceMappingURL=actor.d.ts.map