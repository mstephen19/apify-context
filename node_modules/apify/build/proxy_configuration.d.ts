/**
 * @callback ProxyConfigurationFunction
 * @param {string|number} sessionId
 * @returns {string}
 */
/**
 * @typedef ProxyConfigurationOptions
 * @property {string} [password]
 *   User's password for the proxy. By default, it is taken from the `APIFY_PROXY_PASSWORD`
 *   environment variable, which is automatically set by the system when running the actors.
 * @property {string[]} [groups]
 *   An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).
 *   If not provided, the proxy will select the groups automatically.
 * @property {string} [countryCode]
 *   If set and relevant proxies are available in your Apify account, all proxied requests will
 *   use IP addresses that are geolocated to the specified country. For example `GB` for IPs
 *   from Great Britain. Note that online services often have their own rules for handling
 *   geolocation and thus the country selection is a best attempt at geolocation, rather than
 *   a guaranteed hit. This parameter is optional, by default, each proxied request is assigned
 *   an IP address from a random country. The country code needs to be a two letter ISO country code. See the
 *   [full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).
 *   This parameter is optional, by default, the proxy uses all available proxy servers from all countries.
 *   on the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli).
 * @property {string[]} [apifyProxyGroups]
 *   Same option as `groups` which can be used to
 *   configurate the proxy by UI input schema. You should use the `groups` option in your crawler code.
 * @property {string} [apifyProxyCountry]
 *   Same option as `countryCode` which can be used to
 *   configurate the proxy by UI input schema. You should use the `countryCode` option in your crawler code.
 * @property {string[]} [proxyUrls]
 *   An array of custom proxy URLs to be rotated.
 *   Custom proxies are not compatible with Apify Proxy and an attempt to use both
 *   configuration options will cause an error to be thrown on initialize.
 * @property {ProxyConfigurationFunction} [newUrlFunction]
 *   Custom function that allows you to generate the new proxy URL dynamically. It gets the `sessionId` as a parameter
 *   and should always return stringified proxy URL.
 *   This function is used to generate the URL when {@link ProxyConfiguration.newUrl} or {@link ProxyConfiguration.newProxyInfo} is called.
 */
/**
 * The main purpose of the ProxyInfo object is to provide information
 * about the current proxy connection used by the crawler for the request.
 * Outside of crawlers, you can get this object by calling {@link ProxyConfiguration.newProxyInfo}.
 *
 * **Example usage:**
 *
 * ```javascript
 *
 * const proxyConfiguration = await Apify.createProxyConfiguration({
 *   groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups
 *   countryCode: 'US',
 * });
 *
 * // Getting proxyInfo object by calling class method directly
 * const proxyInfo = proxyConfiguration.newProxyInfo();
 *
 * // In crawler
 * const crawler = new Apify.CheerioCrawler({
 *   // ...
 *   proxyConfiguration,
 *   handlePageFunction: ({ proxyInfo }) => {
 *      // Getting used proxy URL
 *       const proxyUrl = proxyInfo.url;
 *
 *      // Getting ID of used Session
 *       const sessionIdentifier = proxyInfo.sessionId;
 *   }
 * })
 *
 * ```
 * @typedef ProxyInfo
 * @property {string} [sessionId]
 *   The identifier of used {@link Session}, if used.
 * @property {string} url
 *   The URL of the proxy.
 * @property {string[]} groups
 *   An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).
 *   If not provided, the proxy will select the groups automatically.
 * @property {string} [countryCode]
 *   If set and relevant proxies are available in your Apify account, all proxied requests will
 *   use IP addresses that are geolocated to the specified country. For example `GB` for IPs
 *   from Great Britain. Note that online services often have their own rules for handling
 *   geolocation and thus the country selection is a best attempt at geolocation, rather than
 *   a guaranteed hit. This parameter is optional, by default, each proxied request is assigned
 *   an IP address from a random country. The country code needs to be a two letter ISO country code. See the
 *   [full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).
 *   This parameter is optional, by default, the proxy uses all available proxy servers from all countries.
 * @property {string} password
 *   User's password for the proxy. By default, it is taken from the `APIFY_PROXY_PASSWORD`
 *   environment variable, which is automatically set by the system when running the actors
 *   on the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli).
 * @property {string} hostname
 *   Hostname of your proxy.
 * @property {string} port
 *   Proxy port.
 */
/**
 * Configures connection to a proxy server with the provided options. Proxy servers are used to prevent target websites from blocking
 * your crawlers based on IP address rate limits or blacklists. Setting proxy configuration in your crawlers automatically configures
 * them to use the selected proxies for all connections. You can get information about the currently used proxy by inspecting
 * the {@link ProxyInfo} property in your crawler's page function. There, you can inspect the proxy's URL and other attributes.
 *
 * The proxy servers are managed by [Apify Proxy](https://docs.apify.com/proxy). To be able to use Apify Proxy,
 * you need an Apify account and access to the selected proxies. If you provide no configuration option,
 * the proxies will be managed automatically using a smart algorithm.
 *
 * If you want to use your own proxies, use the {@link ProxyConfigurationOptions.proxyUrls} option. Your list of proxy URLs will
 * be rotated by the configuration if this option is provided.
 *
 * **Example usage:**
 *
 * ```javascript
 *
 * const proxyConfiguration = await Apify.createProxyConfiguration({
 *   groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups
 *   countryCode: 'US',
 * });
 *
 * const crawler = new Apify.CheerioCrawler({
 *   // ...
 *   proxyConfiguration,
 *   handlePageFunction: ({ proxyInfo }) => {
 *      const usedProxyUrl = proxyInfo.url; // Getting the proxy URL
 *   }
 * })
 *
 * ```
 * @hideconstructor
 */
export class ProxyConfiguration {
    /**
     * Configuration of proxy.
     *
     * @param {ProxyConfigurationOptions} [options] All `ProxyConfiguration` options.
     * @param {Configuration} [config]
     */
    constructor(options?: ProxyConfigurationOptions | undefined, config?: Configuration | undefined);
    groups: string[];
    countryCode: string | undefined;
    password: string | number | boolean;
    hostname: string | number | boolean;
    port: string | number | boolean;
    nextCustomUrlIndex: number;
    proxyUrls: string[];
    usedProxyUrls: Map<any, any>;
    newUrlFunction: (ProxyConfigurationFunction & Function) | undefined;
    usesApifyProxy: boolean;
    log: import("@apify/log/log").Log;
    config: Configuration;
    isManInTheMiddle: boolean;
    /**
     * Loads proxy password if token is provided and checks access to Apify Proxy and provided proxy groups
     * if Apify Proxy configuration is used.
     * Also checks if country has access to Apify Proxy groups if the country code is provided.
     *
     * You should use the {@link Apify.createProxyConfiguration} function to create a pre-initialized
     * `ProxyConfiguration` instance instead of calling this manually.
     *
     * @returns {Promise<void>}
     */
    initialize(): Promise<void>;
    /**
     * This function creates a new {@link ProxyInfo} info object.
     * It is used by CheerioCrawler and PuppeteerCrawler to generate proxy URLs and also to allow the user to inspect
     * the currently used proxy via the handlePageFunction parameter: proxyInfo.
     * Use it if you want to work with a rich representation of a proxy URL.
     * If you need the URL string only, use {@link ProxyConfiguration.newUrl}.
     * @param {string|number} [sessionId]
     *  Represents the identifier of user {@link Session} that can be managed by the {@link SessionPool} or
     *  you can use the Apify Proxy [Session](https://docs.apify.com/proxy#sessions) identifier.
     *  When the provided sessionId is a number, it's converted to a string. Property sessionId of
     *  {@link ProxyInfo} is always returned as a type string.
     *
     *  All the HTTP requests going through the proxy with the same session identifier
     *  will use the same target proxy server (i.e. the same IP address).
     *  The identifier must not be longer than 50 characters and include only the following: `0-9`, `a-z`, `A-Z`, `"."`, `"_"` and `"~"`.
     * @return {ProxyInfo} represents information about used proxy and its configuration.
     */
    newProxyInfo(sessionId?: string | number | undefined): ProxyInfo;
    /**
     * Returns a new proxy URL based on provided configuration options and the `sessionId` parameter.
     * @param {string|number} [sessionId]
     *  Represents the identifier of user {@link Session} that can be managed by the {@link SessionPool} or
     *  you can use the Apify Proxy [Session](https://docs.apify.com/proxy#sessions) identifier.
     *  When the provided sessionId is a number, it's converted to a string.
     *
     *  All the HTTP requests going through the proxy with the same session identifier
     *  will use the same target proxy server (i.e. the same IP address).
     *  The identifier must not be longer than 50 characters and include only the following: `0-9`, `a-z`, `A-Z`, `"."`, `"_"` and `"~"`.
     * @return {string} A string with a proxy URL, including authentication credentials and port number.
     *  For example, `http://bob:password123@proxy.example.com:8000`
     */
    newUrl(sessionId?: string | number | undefined): string;
    /**
     * Returns proxy username.
     * @param {string} [sessionId]
     * @return {string} the proxy username
     * @ignore
     * @protected
     * @internal
     */
    protected _getUsername(sessionId?: string | undefined): string;
    /**
     * Checks if Apify Token is provided in env
     * and gets the password via API and sets it to env
     * @returns {Promise<void>}
     * @ignore
     * @protected
     * @internal
     */
    protected _setPasswordIfToken(): Promise<void>;
    /**
     * Checks whether the user has access to the proxies specified in the provided ProxyConfigurationOptions.
     * If the check can not be made, it only prints a warning and allows the program to continue. This is to
     * prevent program crashes caused by short downtimes of Proxy.
     *
     * @returns {Promise<void>}
     * @protected
     * @ignore
     * @internal
     */
    protected _checkAccess(): Promise<void>;
    /**
     * Apify Proxy can be down for a second or a minute, but this should not crash processes.
     *
     * @return {Promise<{ connected: boolean, connectionError: string } | undefined>}
     * @protected
     * @ignore
     * @internal
     */
    protected _fetchStatus(): Promise<{
        connected: boolean;
        connectionError: string;
    } | undefined>;
    /**
     * Handles custom url rotation with session
     * @param {string} [sessionId]
     * @returns {string} url
     * @protected
     * @ignore
     * @internal
     */
    protected _handleCustomUrl(sessionId?: string | undefined): string;
    /**
     * Calls the custom newUrlFunction and checks format of its return value
     * @param {string} [sessionId]
     * @protected
     * @ignore
     * @internal
     */
    protected _callNewUrlFunction(sessionId?: string | undefined): string | undefined;
    /**
     * Throws invalid custom newUrlFunction return
     * @param {Error} err
     * @protected
     * @ignore
     * @internal
     */
    protected _throwNewUrlFunctionInvalid(err: Error): void;
    /**
     * Throws invalid proxy value error
     * @param {string} param
     * @param {string} value
     * @protected
     * @ignore
     * @internal
     */
    protected _throwInvalidProxyValueError(param: string, value: string): void;
    /**
     * Throws Apify Proxy is not connected
     * @protected
     * @ignore
     * @internal
     */
    protected _throwApifyProxyConnectionError(errorMessage: any): void;
    /**
     * Throws cannot combine custom proxies with Apify Proxy
     * @protected
     * @ignore
     * @internal
     */
    protected _throwCannotCombineCustomWithApify(): void;
    /**
     * Throws cannot combine custom 2 custom methods
     * @protected
     * @ignore
     * @internal
     */
    protected _throwCannotCombineCustomMethods(): void;
}
export function createProxyConfiguration(proxyConfigurationOptions?: ProxyConfigurationOptions | undefined): Promise<ProxyConfiguration | undefined>;
export type ProxyConfigurationFunction = (sessionId: string | number) => string;
export type ProxyConfigurationOptions = {
    /**
     * User's password for the proxy. By default, it is taken from the `APIFY_PROXY_PASSWORD`
     * environment variable, which is automatically set by the system when running the actors.
     */
    password?: string | undefined;
    /**
     * An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).
     * If not provided, the proxy will select the groups automatically.
     */
    groups?: string[] | undefined;
    /**
     * If set and relevant proxies are available in your Apify account, all proxied requests will
     * use IP addresses that are geolocated to the specified country. For example `GB` for IPs
     * from Great Britain. Note that online services often have their own rules for handling
     * geolocation and thus the country selection is a best attempt at geolocation, rather than
     * a guaranteed hit. This parameter is optional, by default, each proxied request is assigned
     * an IP address from a random country. The country code needs to be a two letter ISO country code. See the
     * [full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).
     * This parameter is optional, by default, the proxy uses all available proxy servers from all countries.
     * on the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli).
     */
    countryCode?: string | undefined;
    /**
     * Same option as `groups` which can be used to
     * configurate the proxy by UI input schema. You should use the `groups` option in your crawler code.
     */
    apifyProxyGroups?: string[] | undefined;
    /**
     * Same option as `countryCode` which can be used to
     * configurate the proxy by UI input schema. You should use the `countryCode` option in your crawler code.
     */
    apifyProxyCountry?: string | undefined;
    /**
     * An array of custom proxy URLs to be rotated.
     * Custom proxies are not compatible with Apify Proxy and an attempt to use both
     * configuration options will cause an error to be thrown on initialize.
     */
    proxyUrls?: string[] | undefined;
    /**
     * Custom function that allows you to generate the new proxy URL dynamically. It gets the `sessionId` as a parameter
     * and should always return stringified proxy URL.
     * This function is used to generate the URL when {@link ProxyConfiguration.newUrl } or {@link ProxyConfiguration.newProxyInfo } is called.
     */
    newUrlFunction?: ProxyConfigurationFunction | undefined;
};
/**
 * The main purpose of the ProxyInfo object is to provide information
 * about the current proxy connection used by the crawler for the request.
 * Outside of crawlers, you can get this object by calling {@link ProxyConfiguration.newProxyInfo }.
 *
 * **Example usage:**
 *
 * ```javascript
 *
 * const proxyConfiguration = await Apify.createProxyConfiguration({
 *   groups: ['GROUP1', 'GROUP2'] // List of Apify Proxy groups
 *   countryCode: 'US',
 * });
 *
 * // Getting proxyInfo object by calling class method directly
 * const proxyInfo = proxyConfiguration.newProxyInfo();
 *
 * // In crawler
 * const crawler = new Apify.CheerioCrawler({
 *   // ...
 *   proxyConfiguration,
 *   handlePageFunction: ({ proxyInfo }) => {
 *      // Getting used proxy URL
 *       const proxyUrl = proxyInfo.url;
 *
 *      // Getting ID of used Session
 *       const sessionIdentifier = proxyInfo.sessionId;
 *   }
 * })
 *
 * ```
 */
export type ProxyInfo = {
    /**
     * The identifier of used {@link Session }, if used.
     */
    sessionId?: string | undefined;
    /**
     *   The URL of the proxy.
     */
    url: string;
    /**
     *   An array of proxy groups to be used by the [Apify Proxy](https://docs.apify.com/proxy).
     *   If not provided, the proxy will select the groups automatically.
     */
    groups: string[];
    /**
     * If set and relevant proxies are available in your Apify account, all proxied requests will
     * use IP addresses that are geolocated to the specified country. For example `GB` for IPs
     * from Great Britain. Note that online services often have their own rules for handling
     * geolocation and thus the country selection is a best attempt at geolocation, rather than
     * a guaranteed hit. This parameter is optional, by default, each proxied request is assigned
     * an IP address from a random country. The country code needs to be a two letter ISO country code. See the
     * [full list of available country codes](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements).
     * This parameter is optional, by default, the proxy uses all available proxy servers from all countries.
     */
    countryCode?: string | undefined;
    /**
     *   User's password for the proxy. By default, it is taken from the `APIFY_PROXY_PASSWORD`
     *   environment variable, which is automatically set by the system when running the actors
     *   on the Apify cloud, or when using the [Apify CLI](https://github.com/apify/apify-cli).
     */
    password: string;
    /**
     *   Hostname of your proxy.
     */
    hostname: string;
    /**
     *   Proxy port.
     */
    port: string;
};
import { Configuration } from "./configuration";
//# sourceMappingURL=proxy_configuration.d.ts.map