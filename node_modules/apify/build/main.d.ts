import { Apify } from "./apify";
import { Configuration } from "./configuration";
import { main } from "./actor";
import { getEnv } from "./actor";
import { call } from "./actor";
import { callTask } from "./actor";
import { metamorph } from "./actor";
import { getMemoryInfo } from "./utils";
import { isAtHome } from "./utils";
import { newClient } from "./utils";
import { addWebhook } from "./actor";
import AutoscaledPool from "./autoscaling/autoscaled_pool";
import { BasicCrawler } from "./crawlers/basic_crawler";
import CheerioCrawler from "./crawlers/cheerio_crawler";
import { pushData } from "./storages/dataset";
import { openDataset } from "./storages/dataset";
import events from "./events";
import { initializeEvents } from "./events";
import { stopEvents } from "./events";
import { getValue } from "./storages/key_value_store";
import { setValue } from "./storages/key_value_store";
import { getInput } from "./storages/key_value_store";
import { openKeyValueStore } from "./storages/key_value_store";
import { launchPuppeteer } from "./browser_launchers/puppeteer_launcher";
import { launchPlaywright } from "./browser_launchers/playwright_launcher";
import BrowserCrawler from "./crawlers/browser_crawler";
import PuppeteerCrawler from "./crawlers/puppeteer_crawler";
import PlaywrightCrawler from "./crawlers/playwright_crawler";
import PseudoUrl from "./pseudo_url";
import Request from "./request";
import { RequestList } from "./request_list";
import { openRequestList } from "./request_list";
import { openRequestQueue } from "./storages/request_queue";
import { openSessionPool } from "./session_pool/session_pool";
import { createProxyConfiguration } from "./proxy_configuration";
import { Session } from "./session_pool/session";
declare const exportedUtils: {
    isDocker: (forceReset: boolean) => Promise<boolean>;
    sleep: (millis: number) => Promise<void>;
    downloadListOfUrls: (options: {
        url: string;
        encoding?: string | undefined;
        urlRegExp?: RegExp | undefined;
    }) => Promise<string[]>;
    extractUrls: (options: {
        string: string;
        urlRegExp?: RegExp | undefined;
    }) => string[];
    htmlToText: (html: any) => string;
    URL_NO_COMMAS_REGEX: RegExp;
    URL_WITH_COMMAS_REGEX: RegExp;
    createRequestDebugInfo: (request: Request | import("./request").RequestOptions, response?: any, additionalFields?: {
        [x: string]: any;
    } | undefined) => {
        [x: string]: any;
    };
    waitForRunToFinish: (options: {
        actorId: string;
        runId: string;
        waitSecs?: string | undefined;
        token?: string | undefined;
    }) => Promise<import("./typedefs").ActorRun>;
    purgeLocalStorage: (folder?: string | undefined) => Promise<void>;
} & {
    puppeteer: {
// @ts-ignore optional peer dependency
        injectFile: (page: import("puppeteer").Page, filePath: string, options?: {
            surviveNavigations?: boolean | undefined;
        } | undefined) => Promise<any>;
// @ts-ignore optional peer dependency
        injectJQuery: (page: import("puppeteer").Page) => Promise<any>;
// @ts-ignore optional peer dependency
        injectUnderscore: (page: import("puppeteer").Page) => Promise<any>;
        enqueueLinksByClickingElements: typeof import("./enqueue_links/click_elements").enqueueLinksByClickingElements;
// @ts-ignore optional peer dependency
        blockRequests: (page: import("puppeteer").Page, options?: {
            urlPatterns?: string[] | undefined;
            extraUrlPatterns?: string[] | undefined;
        } | undefined) => Promise<void>;
        blockResources: (page: any, resourceTypes?: string[]) => Promise<void>;
// @ts-ignore optional peer dependency
        cacheResponses: (page: import("puppeteer").Page, cache: {
            [x: string]: any;
        }, responseUrlRules: (string | RegExp)[]) => Promise<void>;
        compileScript: (scriptString: string, context?: {
            [x: string]: any;
        }) => import("./puppeteer_utils").CompiledScriptFunction;
// @ts-ignore optional peer dependency
        gotoExtended: (page: import("puppeteer").Page, request: globalThis.Request, gotoOptions?: any) => Promise<any>;
// @ts-ignore optional peer dependency
        addInterceptRequestHandler: (page: import("puppeteer").Page, handler: import("./puppeteer_request_interception").InterceptHandler) => Promise<void>;
// @ts-ignore optional peer dependency
        removeInterceptRequestHandler: (page: import("puppeteer").Page, handler: import("./puppeteer_request_interception").InterceptHandler) => Promise<void>;
// @ts-ignore optional peer dependency
        infiniteScroll: (page: import("puppeteer").Page, options?: {
            timeoutSecs?: number | undefined;
            waitForSecs?: number | undefined;
            scrollDownAndUp?: boolean | undefined;
            buttonSelector?: string | undefined;
            stopScrollCallback?: Function | undefined;
        } | undefined) => Promise<void>;
// @ts-ignore optional peer dependency
        saveSnapshot: (page: import("puppeteer").Page, options?: {
            key?: string | undefined;
            screenshotQuality?: number | undefined;
            saveScreenshot?: boolean | undefined;
            saveHtml?: boolean | undefined;
            keyValueStoreName?: string | null | undefined;
        } | undefined) => Promise<void>;
    };
    playwright: {
        gotoExtended: (page: import("playwright-core").Page, request: Request, gotoOptions?: import("./playwright_utils").DirectNavigationOptions | undefined) => Promise<import("playwright-core").Response | null>;
    };
    social: {
        emailsFromText: (text: string) => string[];
        emailsFromUrls: (urls: string[]) => string[];
        phonesFromText: (text: string) => string[];
        phonesFromUrls: (urls: string[]) => string[];
        parseHandlesFromHtml: (html: string, data?: any) => import("./utils_social").SocialHandles;
        EMAIL_REGEX: RegExp;
        EMAIL_REGEX_GLOBAL: RegExp;
        LINKEDIN_REGEX: RegExp;
        LINKEDIN_REGEX_GLOBAL: RegExp;
        INSTAGRAM_REGEX: RegExp;
        INSTAGRAM_REGEX_GLOBAL: RegExp;
        TWITTER_REGEX: RegExp;
        TWITTER_REGEX_GLOBAL: RegExp;
        FACEBOOK_REGEX: RegExp;
        FACEBOOK_REGEX_GLOBAL: RegExp;
        YOUTUBE_REGEX: RegExp;
        YOUTUBE_REGEX_GLOBAL: RegExp;
    };
    log: import("@apify/log/log").Log;
    enqueueLinks: typeof enqueueLinks;
    requestAsBrowser: (options?: import("./utils_request").RequestAsBrowserOptions) => Promise<any>;
};
import { enqueueLinks } from "./enqueue_links/enqueue_links";
export { Apify, Configuration, main, getEnv, call, callTask, metamorph, getMemoryInfo, isAtHome, newClient, addWebhook, AutoscaledPool, BasicCrawler, CheerioCrawler, pushData, openDataset, events, initializeEvents, stopEvents, getValue, setValue, getInput, openKeyValueStore, launchPuppeteer, launchPlaywright, BrowserCrawler, PuppeteerCrawler, PlaywrightCrawler, PseudoUrl, Request, RequestList, openRequestList, openRequestQueue, openSessionPool, createProxyConfiguration, Session, exportedUtils as utils };
//# sourceMappingURL=main.d.ts.map
export { ApifyEnv, EventTypes, UserFunc, AdhocWebhook, WebhookRun } from "./actor";
export { AutoscaledPoolOptions } from "./autoscaling/autoscaled_pool";
export { SnapshotterOptions } from "./autoscaling/snapshotter";
export { SystemInfo, SystemStatusOptions } from "./autoscaling/system_status";
export { BrowserLaunchContext } from "./browser_launchers/browser_launcher";
export { BrowserPlugin } from "./browser_launchers/browser_plugin";
export { PlaywrightLauncher, PlaywrightLaunchContext } from "./browser_launchers/playwright_launcher";
export { PuppeteerLauncher, PuppeteerLaunchContext } from "./browser_launchers/puppeteer_launcher";
export { CrawlingContext, BasicCrawlerOptions, HandleRequest, HandleRequestInputs, HandleFailedRequest, HandleFailedRequestInput } from "./crawlers/basic_crawler";
export { BrowserCrawlingContext, Hook, BrowserHandlePageFunction, GotoFunction, BrowserCrawlerOptions } from "./crawlers/browser_crawler";
export { CheerioCrawlerOptions, PrepareRequestInputs, PrepareRequest, PostResponseInputs, PostResponse, CheerioHandlePageInputs, CheerioHandlePage } from "./crawlers/cheerio_crawler";
export { PlaywrightGotoOptions, PlaywrightHook, PlaywrightHandlePageFunctionParam, PlaywrightHandlePageFunction, PlaywrightCrawlerOptions } from "./crawlers/playwright_crawler";
export { PuppeteerHook, PuppeteerHandlePageFunctionParam, PuppeteerHandlePage, PuppeteerCrawlerOptions } from "./crawlers/puppeteer_crawler";
export { StatisticsOptions, StatisticPersistedState, StatisticState } from "./crawlers/statistics";
export { RequestTransform } from "./enqueue_links/shared";
export { ApifyCallError, TimeoutError } from "./errors";
export { DirectNavigationOptions } from "./playwright_utils";
export { ProxyConfiguration, ProxyConfigurationFunction, ProxyConfigurationOptions, ProxyInfo } from "./proxy_configuration";
export { InterceptHandler } from "./puppeteer_request_interception";
export { CompiledScriptParams, CompiledScriptFunction } from "./puppeteer_utils";
export { RequestOptions } from "./request";
export { RequestListOptions, RequestListState, RequestListSourcesFunction } from "./request_list";
export { CookieParseError } from "./session_pool/errors";
export { SessionState, SessionOptions } from "./session_pool/session";
export { SessionPool, CreateSession, SessionPoolOptions } from "./session_pool/session_pool";
export { StealthOptions } from "./stealth/stealth";
export { Dataset, DatasetContent, DatasetConsumer, DatasetMapper, DatasetReducer } from "./storages/dataset";
export { KeyValueStore, KeyValueStoreValueTypes, KeyConsumer } from "./storages/key_value_store";
export { RequestQueue, QueueOperationInfo, RequestQueueInfo } from "./storages/request_queue";
export { StorageManager } from "./storages/storage_manager";
export { ActorRun } from "./typedefs";
export { MemoryInfo } from "./utils";
export { RequestAsBrowserResult, RequestAsBrowserOptions, AbortFunction } from "./utils_request";
export { SocialHandles } from "./utils_social";