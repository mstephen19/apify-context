/// <reference types="node" />
export function newClient(options?: {
    token?: string | undefined;
    maxRetries?: string | undefined;
    minDelayBetweenRetriesMillis?: string | undefined;
} | undefined): ApifyClient;
export function logSystemInfo(): void;
/**
 * The default instance of `ApifyClient` used internally
 * by the SDK.
 *
 * @type {*}
 * @ignore
 */
export const apifyClient: any;
export function addCharsetToContentType(contentType: string): string;
export function isDocker(forceReset: boolean): Promise<boolean>;
export function weightedAvg(arrValues: number[], arrWeights: number[]): number;
export function getMemoryInfo(): Promise<MemoryInfo>;
export function getFirstKey(dict: any): string | undefined;
export function getTypicalChromeExecutablePath(): string;
export function isAtHome(): boolean;
export function sleep(millis: number): Promise<void>;
export function snakeCaseToCamelCase(snakeCaseStr: string): string;
export function printOutdatedSdkWarning(): void;
export function parseContentTypeFromResponse(response: IncomingMessage): {
    type: string;
    charset: string;
};
export function waitForRunToFinish(options: {
    actorId: string;
    runId: string;
    waitSecs?: string | undefined;
    token?: string | undefined;
}): Promise<ActorRun>;
export function purgeLocalStorage(folder?: string | undefined): Promise<void>;
export namespace publicUtils {
    export { isDocker };
    export { sleep };
    export { downloadListOfUrls };
    export { extractUrls };
    export { htmlToText };
    export { URL_NO_COMMAS_REGEX };
    export { URL_WITH_COMMAS_REGEX };
    export { createRequestDebugInfo };
    export { waitForRunToFinish };
    export { purgeLocalStorage };
}
/**
 * Describes memory usage of an Actor.
 */
export type MemoryInfo = {
    /**
     * Total memory available in the system or container
     */
    totalBytes: number;
    /**
     * Amount of free memory in the system or container
     */
    freeBytes: number;
    /**
     * Amount of memory used (= totalBytes - freeBytes)
     */
    usedBytes: number;
    /**
     * Amount of memory used the current Node.js process
     */
    mainProcessBytes: number;
    /**
     * Amount of memory used by child processes of the current Node.js process
     */
    childProcessesBytes: number;
};
import { ApifyClient } from "apify-client/dist/apify_client";
import { IncomingMessage } from "http";
import { ActorRun } from "./typedefs";
/**
 * Returns a promise that resolves to an array of urls parsed from the resource available at the provided url.
 * Optionally, custom regular expression and encoding may be provided.
 *
 * @param {object} options
 * @param {string} options.url URL to the file
 * @param {string} [options.encoding='utf8'] The encoding of the file.
 * @param {RegExp} [options.urlRegExp=URL_NO_COMMAS_REGEX]
 *   Custom regular expression to identify the URLs in the file to extract.
 *   The regular expression should be case-insensitive and have global flag set (i.e. `/something/gi`).
 * @returns {Promise<Array<string>>}
 * @memberOf utils
 */
declare function downloadListOfUrls(options: {
    url: string;
    encoding?: string | undefined;
    urlRegExp?: RegExp | undefined;
}): Promise<Array<string>>;
/**
 * Collects all URLs in an arbitrary string to an array, optionally using a custom regular expression.
 * @param {object} options
 * @param {string} options.string
 * @param {RegExp} [options.urlRegExp=Apify.utils.URL_NO_COMMAS_REGEX]
 * @returns {string[]}
 * @memberOf utils
 */
declare function extractUrls(options: {
    string: string;
    urlRegExp?: RegExp | undefined;
}): string[];
/**
 * The function converts a HTML document to a plain text.
 *
 * The plain text generated by the function is similar to a text captured
 * by pressing Ctrl+A and Ctrl+C on a page when loaded in a web browser.
 * The function doesn't aspire to preserve the formatting or to be perfectly correct with respect to HTML specifications.
 * However, it attempts to generate newlines and whitespaces in and around HTML elements
 * to avoid merging distinct parts of text and thus enable extraction of data from the text (e.g. phone numbers).
 *
 * **Example usage**
 * ```javascript
 * const text = htmlToText('<html><body>Some text</body></html>');
 * console.log(text);
 * ```
 *
 * Note that the function uses [cheerio](https://www.npmjs.com/package/cheerio) to parse the HTML.
 * Optionally, to avoid duplicate parsing of HTML and thus improve performance, you can pass
 * an existing Cheerio object to the function instead of the HTML text. The HTML should be parsed
 * with the `decodeEntities` option set to `true`. For example:
 *
 * ```javascript
 * const cheerio = require('cheerio');
 * const html = '<html><body>Some text</body></html>';
 * const text = htmlToText(cheerio.load(html, { decodeEntities: true }));
 * ```
 * @param {(string|cheerio.Root)} html HTML text or parsed HTML represented using a
 * [cheerio](https://www.npmjs.com/package/cheerio) function.
 * @return {string} Plain text
 * @memberOf utils
 * @function
 */
declare function htmlToText(html: (string | any)): string;
/**
 * Default regular expression to match URLs in a string that may be plain text, JSON, CSV or other. It supports common URL characters
 * and does not support URLs containing commas or spaces. The URLs also may contain Unicode letters (not symbols).
 * @memberOf utils
 */
declare const URL_NO_COMMAS_REGEX: RegExp;
/**
 * Regular expression that, in addition to the default regular expression `URL_NO_COMMAS_REGEX`, supports matching commas in URL path and query.
 * Note, however, that this may prevent parsing URLs from comma delimited lists, or the URLs may become malformed.
 * @memberOf utils
 */
declare const URL_WITH_COMMAS_REGEX: RegExp;
/**
 * Creates a standardized debug info from request and response. This info is usually added to dataset under the hidden `#debug` field.
 *
 * @param {(Request|RequestOptions)} request [Apify.Request](https://sdk.apify.com/docs/api/request) object.
 * @param {(*|IncomingMessage|PuppeteerResponse)} [response]
 *   Puppeteer [`Response`](https://pptr.dev/#?product=Puppeteer&version=v1.11.0&show=api-class-response)
 *   or NodeJS [`http.IncomingMessage`](https://nodejs.org/api/http.html#http_class_http_serverresponse).
 * @param {Object<string, *>} [additionalFields] Object containing additional fields to be added.

 * @return {Object<string, *>}
 */
declare function createRequestDebugInfo(request: (Request | RequestOptions), response?: (any | IncomingMessage | any), additionalFields?: {
    [x: string]: any;
} | undefined): {
    [x: string]: any;
};
import Request from "./request";
import { RequestOptions } from "./request";
export {};
//# sourceMappingURL=utils.d.ts.map