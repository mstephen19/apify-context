export namespace socialUtils {
    export { emailsFromText };
    export { emailsFromUrls };
    export { phonesFromText };
    export { phonesFromUrls };
    export { parseHandlesFromHtml };
    export { EMAIL_REGEX };
    export { EMAIL_REGEX_GLOBAL };
    export { LINKEDIN_REGEX };
    export { LINKEDIN_REGEX_GLOBAL };
    export { INSTAGRAM_REGEX };
    export { INSTAGRAM_REGEX_GLOBAL };
    export { TWITTER_REGEX };
    export { TWITTER_REGEX_GLOBAL };
    export { FACEBOOK_REGEX };
    export { FACEBOOK_REGEX_GLOBAL };
    export { YOUTUBE_REGEX };
    export { YOUTUBE_REGEX_GLOBAL };
}
/**
 * Representation of social handles parsed from a HTML page.
 *
 * The object has the following structure:
 *
 * ```
 * {
 *   emails: String[],
 *   phones: String[],
 *   phonesUncertain: String[],
 *   linkedIns: String[],
 *   twitters: String[],
 *   instagrams: String[],
 *   facebooks: String[],
 *   youtubes: String[],
 * }
 * ```
 */
export type SocialHandles = {
    emails: string[];
    phones: string[];
    phonesUncertain: string[];
    linkedIns: string[];
    twitters: string[];
    instagrams: string[];
    facebooks: string[];
    youtubes: string[];
};
/**
 * The function extracts email addresses from a plain text.
 * Note that the function preserves the order of emails and keep duplicates.
 * @param {string} text Text to search in.
 * @return {string[]} Array of emails addresses found.
 * If no emails are found, the function returns an empty array.
 * @memberOf social
 */
declare function emailsFromText(text: string): string[];
/**
 * The function extracts email addresses from a list of URLs.
 * Basically it looks for all `mailto:` URLs and returns valid email addresses from them.
 * Note that the function preserves the order of emails and keep duplicates.
 * @param {string[]} urls Array of URLs.
 * @return {string[]} Array of emails addresses found.
 * If no emails are found, the function returns an empty array.
 * @memberOf social
 */
declare function emailsFromUrls(urls: string[]): string[];
/**
 * The function attempts to extract phone numbers from a text. Please note that
 * the results might not be accurate, since phone numbers appear in a large variety of formats and conventions.
 * If you encounter some problems, please [file an issue](https://github.com/apify/apify-js/issues).
 * @param {string} text Text to search the phone numbers in.
 * @return {string[]} Array of phone numbers found.
 * If no phone numbers are found, the function returns an empty array.
 * @memberOf social
 */
declare function phonesFromText(text: string): string[];
/**
 * Finds phone number links in an array of URLs and extracts the phone numbers from them.
 * Note that the phone number links look like `tel://123456789`, `tel:/123456789` or `tel:123456789`.
 * @param {string[]} urls Array of URLs.
 * @return {string[]} Array of phone numbers found.
 * If no phone numbers are found, the function returns an empty array.
 * @memberOf social
 */
declare function phonesFromUrls(urls: string[]): string[];
/**
 * Representation of social handles parsed from a HTML page.
 *
 * The object has the following structure:
 *
 * ```
 * {
 *   emails: String[],
 *   phones: String[],
 *   phonesUncertain: String[],
 *   linkedIns: String[],
 *   twitters: String[],
 *   instagrams: String[],
 *   facebooks: String[],
 *   youtubes: String[],
 * }
 * ```
 * @typedef SocialHandles
 * @property {string[]} emails
 * @property {string[]} phones
 * @property {string[]} phonesUncertain
 * @property {string[]} linkedIns
 * @property {string[]} twitters
 * @property {string[]} instagrams
 * @property {string[]} facebooks
 * @property {string[]} youtubes
 */
/**
 * The function attempts to extract emails, phone numbers and social profile URLs from a HTML document,
 * specifically LinkedIn, Twitter, Instagram and Facebook profile URLs.
 * The function removes duplicates from the resulting arrays and sorts the items alphabetically.
 *
 * Note that the `phones` field contains phone numbers extracted from the special phone links
 * such as `[call us](tel:+1234556789)` (see {@link social#phonesFromUrls})
 * and potentially other sources with high certainty, while `phonesUncertain` contains phone numbers
 * extracted from the plain text, which might be very inaccurate.
 *
 * **Example usage:**
 * ```javascript
 * const Apify = require('apify');
 *
 * const browser = await Apify.launchPuppeteer();
 * const page = await browser.newPage();
 * await page.goto('http://www.example.com');
 * const html = await page.content();
 *
 * const result = Apify.utils.social.parseHandlesFromHtml(html);
 * console.log('Social handles:');
 * console.dir(result);
 * ```
 *
 * @param {string} html HTML text
 * @param {*|null} [data] Optional object which will receive the `text` and `$` properties
 *   that contain text content of the HTML and `cheerio` object, respectively. This is an optimization
 *   so that the caller doesn't need to parse the HTML document again, if needed.
 * @return {SocialHandles} An object with the social handles.
 *
 * @memberOf social
 */
declare function parseHandlesFromHtml(html: string, data?: any | null): SocialHandles;
/**
 * Regular expression to exactly match a single email address.
 * It has the following form: `/^...$/i`.
 * @type {RegExp}
 * @memberOf social
 */
declare const EMAIL_REGEX: RegExp;
/**
 * Regular expression to find multiple email addresses in a text.
 * It has the following form: `/.../ig`.
 * @type {RegExp}
 * @memberOf social
 */
declare const EMAIL_REGEX_GLOBAL: RegExp;
/** @type RegExp */
declare let LINKEDIN_REGEX: RegExp;
/** @type RegExp */
declare let LINKEDIN_REGEX_GLOBAL: RegExp;
/** @type RegExp */
declare let INSTAGRAM_REGEX: RegExp;
/** @type RegExp */
declare let INSTAGRAM_REGEX_GLOBAL: RegExp;
/** @type RegExp */
declare let TWITTER_REGEX: RegExp;
/** @type RegExp */
declare let TWITTER_REGEX_GLOBAL: RegExp;
/** @type RegExp */
declare let FACEBOOK_REGEX: RegExp;
/** @type RegExp */
declare let FACEBOOK_REGEX_GLOBAL: RegExp;
/** @type RegExp */
declare let YOUTUBE_REGEX: RegExp;
/** @type RegExp */
declare let YOUTUBE_REGEX_GLOBAL: RegExp;
export {};
//# sourceMappingURL=utils_social.d.ts.map