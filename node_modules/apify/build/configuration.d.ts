/**
 * `Configuration` is a value object holding the SDK configuration. We can use it in two ways:
 *
 * 1. When using `Apify` class, we can get the instance configuration via `sdk.config`
 *   ```js
 *   const { Apify } = require('apify');
 *
 *   const sdk = new Apify({ token: '123' });
 *   console.log(sdk.config.get('token')); // '123'
 *   ```
 * 2. To get the global configuration (singleton instance). It will respect the environment variables.
 *   ```js
 *   console.log(Configuration.getGlobalConfig().get('token')); // returns the token from APIFY_TOKEN env var
 *   ```
 *
 * ## Supported Configuration Options
 *
 * Key | Environment Variable | Default Value
 * ---|---|---
 * `defaultDatasetId` | `APIFY_DEFAULT_DATASET_ID` | `'default'`
 * `defaultKeyValueStoreId` | `APIFY_DEFAULT_KEY_VALUE_STORE_ID` | `'default'`
 * `defaultRequestQueueId` | `APIFY_DEFAULT_REQUEST_QUEUE_ID` | `'default'`
 * `localStorageDir` | `APIFY_LOCAL_STORAGE_DIR` | `'./apify_storage'`
 * `localStorageEnableWalMode` | `APIFY_LOCAL_STORAGE_ENABLE_WAL_MODE` | `true`
 * `persistStateIntervalMillis` | `APIFY_PERSIST_STATE_INTERVAL_MILLIS` | `60e3`
 * `token` | `APIFY_TOKEN` | -
 *
 * ## Advanced Configuration Options
 *
 * Key | Environment Variable | Default Value
 * ---|---|---
 * `actorEventsWsUrl` | `APIFY_ACTOR_EVENTS_WS_URL` | -
 * `actorId` | `APIFY_ACTOR_ID` | -
 * `actorRunId` | `APIFY_ACTOR_RUN_ID` | -
 * `actorTaskId` | `APIFY_ACTOR_TASK_ID` | -
 * `apiBaseUrl` | `APIFY_API_BASE_URL` | `'https://api.apify.com'`
 * `containerPort` | `APIFY_CONTAINER_PORT` | `4321`
 * `containerUrl` | `APIFY_CONTAINER_URL` | `'http://localhost:4321'`
 * `inputKey` | `APIFY_INPUT_KEY` | `'INPUT'`
 * `isAtHome` | `APIFY_IS_AT_HOME` | -
 * `metamorphAfterSleepMillis` | `APIFY_METAMORPH_AFTER_SLEEP_MILLIS` | `300e3`
 * `proxyHostname` | `APIFY_PROXY_HOSTNAME` | `'proxy.apify.com'`
 * `proxyPassword` | `APIFY_PROXY_PASSWORD` | -
 * `proxyPort` | `APIFY_PROXY_PORT` | `8000`
 * `proxyStatusUrl` | `APIFY_PROXY_STATUS_URL` | `'http://proxy.apify.com'`
 * `userId` | `APIFY_USER_ID` | -
 *
 * ## Not Supported environment variables
 *
 * - `MEMORY_MBYTES`
 * - `HEADLESS`
 * - `XVFB`
 * - `CHROME_EXECUTABLE_PATH`
 */
export class Configuration {
    static ENV_MAP: {
        APIFY_TOKEN: string;
        APIFY_LOCAL_STORAGE_DIR: string;
        APIFY_LOCAL_STORAGE_ENABLE_WAL_MODE: string;
        APIFY_DEFAULT_DATASET_ID: string;
        APIFY_DEFAULT_KEY_VALUE_STORE_ID: string;
        APIFY_DEFAULT_REQUEST_QUEUE_ID: string;
        APIFY_METAMORPH_AFTER_SLEEP_MILLIS: string;
        APIFY_PERSIST_STATE_INTERVAL_MILLIS: string;
        APIFY_TEST_PERSIST_INTERVAL_MILLIS: string;
        APIFY_ACTOR_EVENTS_WS_URL: string;
        APIFY_INPUT_KEY: string;
        APIFY_ACTOR_ID: string;
        APIFY_API_BASE_URL: string;
        APIFY_IS_AT_HOME: string;
        APIFY_ACTOR_RUN_ID: string;
        APIFY_ACTOR_TASK_ID: string;
        APIFY_CONTAINER_PORT: string;
        APIFY_CONTAINER_URL: string;
        APIFY_USER_ID: string;
        APIFY_PROXY_HOSTNAME: string;
        APIFY_PROXY_PASSWORD: string;
        APIFY_PROXY_STATUS_URL: string;
        APIFY_PROXY_PORT: string;
    };
    static ENV_MAP_REVERSED: {};
    static BOOLEAN_VARS: string[];
    static INTEGER_VARS: string[];
    static DEFAULTS: {
        defaultKeyValueStoreId: string;
        defaultDatasetId: string;
        defaultRequestQueueId: string;
        inputKey: string;
        apiBaseUrl: string;
        proxyStatusUrl: string;
        proxyHostname: string;
        proxyPort: number;
        containerPort: number;
        containerUrl: string;
        metamorphAfterSleepMillis: number;
        persistStateIntervalMillis: number;
        localStorageEnableWalMode: boolean;
    };
    /**
     * Returns the global configuration instance. It will respect the environment variables.
     * As opposed to this method, we can also get the SDK instance configuration via `sdk.config` property.
     *
     * @return {Configuration}
     */
    static getGlobalConfig(): Configuration;
    /**
     * Creates new `Configuration` instance with provided options. Env vars will have precedence over those.
     *
     * @param {Record<string, number | string | boolean>} options
     */
    constructor(options?: Record<string, number | string | boolean>);
    options: Map<string, string | number | boolean>;
    services: Map<any, any>;
    /**
     * Returns configured value. First checks the environment variables, then provided configuration,
     * fallbacks to the `defaultValue` argument if provided, otherwise uses the default value as described
     * in the above section.
     *
     * @param {string} key
     * @param {string | number | boolean} [defaultValue]
     * @return {string | number | boolean}
     */
    get(key: string, defaultValue?: string | number | boolean | undefined): string | number | boolean;
    /**
     * @param {string} key
     * @param {number | string | boolean} value
     * @return {boolean}
     * @private
     */
    private _castEnvValue;
    /**
     * Sets value for given option. Only affects this `Configuration` instance, the value will not be propagated down to the env var.
     * To reset a value, we can omit the `value` argument or pass `undefined` there.
     *
     * @param {string} key
     * @param {string | number | boolean} [value]
     */
    set(key: string, value?: string | number | boolean | undefined): void;
    /**
     * Returns cached instance of {@link ApifyClient} using options as defined in the environment variables or in
     * this {@link Configuration} instance. Only first call of this method will create the client, following calls will
     * return the same client instance.
     *
     * Caching works based on the API URL and token, so calling this method with different options will return
     * multiple instances, one for each variant of the options.
     *
     * @param {object} [options]
     * @param {string} [options.token]
     * @param {string} [options.maxRetries]
     * @param {string} [options.minDelayBetweenRetriesMillis]
     * @return {ApifyClient}
     * @internal
     */
    getClient(options?: {
        token?: string | undefined;
        maxRetries?: string | undefined;
        minDelayBetweenRetriesMillis?: string | undefined;
    } | undefined): ApifyClient;
    /**
     * Returns cached instance of {@link ApifyStorageLocal} using options as defined in the environment variables or in
     * this {@link Configuration} instance. Only first call of this method will create the client, following calls will return
     * the same client instance.
     *
     * Caching works based on the `storageDir` option, so calling this method with different `storageDir` will return
     * multiple instances, one for each directory.
     *
     * @param {object} [options]
     * @param {string} [options.storageDir]
     * @param {boolean} [options.enableWalMode=true]
     * @return {ApifyStorageLocal}
     * @internal
     */
    getStorageLocal(options?: {
        storageDir?: string | undefined;
        enableWalMode?: boolean | undefined;
    } | undefined): ApifyStorageLocal;
    /**
     * Returns cached (singleton) instance of a service by its name. If the service does not exist yet, it will be created
     * via the `createCallback`. To have multiple instances of one service, we can use unique values in the `cacheKey`.
     *
     * @param {string} name
     * @param {Function} createCallback
     * @param {string} [cacheKey]
     * @return {unknown}
     * @private
     */
    private _getService;
    /**
     * Creates an instance of ApifyClient using options as defined in the environment variables or in this `Configuration` instance.
     *
     * @param {object} [options]
     * @param {string} [options.token]
     * @param {string} [options.maxRetries]
     * @param {string} [options.minDelayBetweenRetriesMillis]
     * @return {ApifyClient}
     * @internal
     */
    createClient(options?: {
        token?: string | undefined;
        maxRetries?: string | undefined;
        minDelayBetweenRetriesMillis?: string | undefined;
    } | undefined): ApifyClient;
    /**
     * Creates an instance of ApifyStorageLocal using options as defined in the environment variables or in this `Configuration` instance.
     *
     * @param {object} [options]
     * @param {string} [options.storageDir]
     * @param {boolean} [options.enableWalMode=true]
     * @return {ApifyStorageLocal}
     * @internal
     */
    createStorageLocal(options?: {
        storageDir?: string | undefined;
        enableWalMode?: boolean | undefined;
    } | undefined): ApifyStorageLocal;
}
import { ApifyClient } from "apify-client/dist/apify_client";
import { ApifyStorageLocal } from "@apify/storage-local";
//# sourceMappingURL=configuration.d.ts.map