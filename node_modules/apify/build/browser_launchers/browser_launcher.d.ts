/**
 * @typedef BrowserLaunchContext
 * @property {Object<string, *>} [launchOptions]
 *  `Options passed to the browser launcher function. Options are based on underlying library.
 * @property {string} [proxyUrl]
 *   URL to a HTTP proxy server. It must define the port number,
 *   and it may also contain proxy username and password.
 *
 *   Example: `http://bob:pass123@proxy.example.com:1234`.
 * @property {boolean} [useChrome=false]
 *   If `true` and `executablePath` is not set,
 *   Playwright will launch full Google Chrome browser available on the machine
 *   rather than the bundled Chromium. The path to Chrome executable
 *   is taken from the `APIFY_CHROME_EXECUTABLE_PATH` environment variable if provided,
 *   or defaults to the typical Google Chrome executable location specific for the operating system.
 *   By default, this option is `false`.
 * @property {*} [launcher]
// @ts-ignore optional peer dependency
 *   By default this function uses require("playwright").chromium`.
// @ts-ignore optional peer dependency
 *   If you want to use a different browser you can pass it by this property as `require("playwright").firefox
 */
/**
 * Abstract class for creating browser launchers, such as `PlaywrightLauncher` and `PuppeteerLauncher`.
 * @ignore
 */
export default class BrowserLauncher {
    static optionsShape: {
        proxyUrl: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
        useChrome: import("ow").BooleanPredicate & import("ow").BasePredicate<boolean | undefined>;
        useIncognitoPages: import("ow").BooleanPredicate & import("ow").BasePredicate<boolean | undefined>;
        userDataDir: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
        launchOptions: import("ow").ObjectPredicate<object> & import("ow").BasePredicate<object | undefined>;
    };
    /**
     *
     * @param {string} launcher
     * @param {string} apifyImageName
     * @returns {*}
     *
     */
    static requireLauncherOrThrow(launcher: string, apifyImageName: string): any;
    /**
    * @param {BrowserLaunchContext} launchContext
    * All `BrowserLauncher` parameters are passed via an launchContext object.
    */
    constructor(launchContext: BrowserLaunchContext);
    /** @type {*} */
    launcher: any;
    proxyUrl: string | undefined;
    useChrome: boolean | undefined;
    /** @type {Object<string, *>} */
    launchOptions: {
        [x: string]: any;
    };
    otherLaunchContextProps: {};
    /** @type {BrowserPlugin} */
    Plugin: BrowserPlugin;
    /**
     * @returns {BrowserPlugin}
     * @ignore
     */
    createBrowserPlugin(): BrowserPlugin;
    /**
     * Launches a browser instance based on the plugin.
     * @returns {Promise<*>} Browser instance.
     */
    launch(): Promise<any>;
    /**
     * @returns {Object<string, *>}
     */
    createLaunchOptions(): {
        [x: string]: any;
    };
    /**
     * @returns {boolean}
     * @private
     */
    private _getDefaultHeadlessOption;
    /**
    * @returns {string}
    * @private
    */
    private _getChromeExecutablePath;
    /**
     *
     * @param {string} proxyUrl
     * @private
     */
    private _validateProxyUrlProtocol;
}
export type BrowserLaunchContext = {
    /**
     * `Options passed to the browser launcher function. Options are based on underlying library.
     */
    launchOptions?: {
        [x: string]: any;
    } | undefined;
    /**
     * URL to a HTTP proxy server. It must define the port number,
     * and it may also contain proxy username and password.
     *
     * Example: `http://bob:pass123@proxy.example.com:1234`.
     */
    proxyUrl?: string | undefined;
    /**
     * If `true` and `executablePath` is not set,
     * Playwright will launch full Google Chrome browser available on the machine
     * rather than the bundled Chromium. The path to Chrome executable
     * is taken from the `APIFY_CHROME_EXECUTABLE_PATH` environment variable if provided,
     * or defaults to the typical Google Chrome executable location specific for the operating system.
     * By default, this option is `false`.
     */
    useChrome?: boolean | undefined;
    /**
// @ts-ignore optional peer dependency
     * By default this function uses require("playwright").chromium`.
// @ts-ignore optional peer dependency
     * If you want to use a different browser you can pass it by this property as `require("playwright").firefox
     */
    launcher?: any;
};
import { BrowserPlugin } from "./browser_plugin";
//# sourceMappingURL=browser_launcher.d.ts.map