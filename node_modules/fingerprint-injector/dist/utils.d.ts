/**
 * @param {object} masterObject - Object ot override
 * @param {string} propertyName - property to override
 * @param {function} proxyHandler - proxy handled with the new value
 */
declare function overridePropertyWithProxy(masterObject: object, propertyName: string, proxyHandler: Function): void;
/**
 * @param {object} masterObject - Object ot override
 * @param {string} propertyName - property to override
 * @param {function} proxyHandler - proxy handled with getter handler
 */
declare function overrideGetterWithProxy(masterObject: object, propertyName: string, proxyHandler: Function): void;
/**
 * @param {Object} instance - instance to override such as navigator.
 * @param {Object} overrideObj - new instance values such as userAgent.
 */
declare function overrideInstancePrototype(instance: Object, overrideObj: Object): void;
declare function redirectToString(proxyObj: any, originalObj: any): void;
declare function makeNativeString(name?: string): string;
declare function redefineProperty(masterObject: any, propertyName: any, descriptorOverrides?: {}): any;
declare function stripProxyFromErrors(handler: any): {};
declare function overrideWebGl(webGl: any): void;
declare function overrideBattery(batteryInfo: any): void;
declare function makeHandler(): {
    getterValue: (value: any) => {
        apply(target: any, ctx: any, args: any, ...args: any[]): any;
    };
};
declare namespace cache {
    namespace Reflect {
        const get: typeof Reflect.get;
        const apply: typeof Reflect.apply;
    }
    const nativeToStringStr: string;
}
declare function overrideCodecs(audioCodecs: any, videoCodecs: any): void;
//# sourceMappingURL=utils.d.ts.map