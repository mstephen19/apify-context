export declare type Fingerprint = {
    screen: Record<string, number>;
    navigator: Record<string, string | number | [] | undefined>;
    webGl: Record<string, string>;
    userAgent: string;
    audioCodecs: Record<string, string>[];
    videoCodecs: Record<string, string>[];
    battery?: boolean;
};
declare type addInitScriptOptions = {
    content: string;
};
declare type BrowserContext = {
    addInitScript: (options: addInitScriptOptions) => Promise<void>;
};
declare type Viewport = {
    width: number;
    height: number;
};
declare type Page = {
    evaluateOnNewDocument: (functionToEvaluate: string) => Promise<void>;
    setUserAgent: (userAgent: string) => Promise<void>;
    setViewport: (viewport: Viewport) => Promise<void>;
};
/**
 * Fingerprint injector class.
 * @class
 */
export declare class FingerprintInjector {
    log: import("@apify/log").Log;
    utilsJs: string;
    constructor();
    /**
     * Adds init script to the browser context, so the fingerprint is changed before every document creation.
     * DISCLAIMER: Since the playwright does not support changing viewport and User-agent after the context is created,
     * you have to set it manually when the context is created. Check the playwright usage example.
     * @param browserContext - playwright browser context
     * @param fingerprint fingerprint from [`fingerprint-generator`](https://github.com/apify/fingerprint-generator)
     */
    attachFingerprintToPlaywright(browserContext: BrowserContext, fingerprint: Fingerprint): Promise<void>;
    /**
     * Adds script that is evaluated before every document creation.
     * Sets User-Agent and viewport using native puppeteer interface
     * @param page - puppeteer page
     * @param fingerprint - fingerprint from [`fingerprint-generator`](https://github.com/apify/fingerprint-generator)
     */
    attachFingerprintToPuppeteer(page: Page, fingerprint: Fingerprint): Promise<void>;
    /**
     * Create injection function string.
     * @private
     * @param fingerprint - enhanced fingerprint.
     * @returns {string} - script that overrides browser fingerprint.
     */
    private _getInjectableFingerprintFunction;
    private _enhanceFingerprint;
    private _loadUtils;
}
export {};
//# sourceMappingURL=fingerprint-injector.d.ts.map