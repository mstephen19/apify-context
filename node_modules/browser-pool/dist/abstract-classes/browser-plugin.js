"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserPlugin = void 0;
const tslib_1 = require("tslib");
const lodash_merge_1 = (0, tslib_1.__importDefault)(require("lodash.merge"));
const launch_context_1 = require("../launch-context");
const utils_1 = require("./utils");
;
/**
 * The `BrowserPlugin` serves two purposes. First, it is the base class that
 * specialized controllers like `PuppeteerPlugin` or `PlaywrightPlugin` extend.
 * Second, it allows the user to configure the automation libraries and
 * feed them to {@link BrowserPool} for use.
 */
class BrowserPlugin {
    constructor(library, options = {}) {
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: this.constructor.name
        });
        Object.defineProperty(this, "library", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "launchOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "proxyUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "userDataDir", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "useIncognitoPages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        const { launchOptions = {}, proxyUrl, userDataDir, useIncognitoPages = false, } = options;
        this.library = library;
        this.launchOptions = launchOptions;
        this.proxyUrl = proxyUrl && new URL(proxyUrl).href;
        this.userDataDir = userDataDir;
        this.useIncognitoPages = useIncognitoPages;
    }
    /**
     * Creates a `LaunchContext` with all the information needed
     * to launch a browser. Aside from library specific launch options,
     * it also includes internal properties used by `BrowserPool` for
     * management of the pool and extra features.
     */
    createLaunchContext(options = {}) {
        const { id, launchOptions = {}, proxyUrl = this.proxyUrl, useIncognitoPages = this.useIncognitoPages, userDataDir = this.userDataDir, } = options;
        return new launch_context_1.LaunchContext({
            id,
            launchOptions: (0, lodash_merge_1.default)({}, this.launchOptions, launchOptions),
            browserPlugin: this,
            proxyUrl,
            useIncognitoPages,
            userDataDir,
        });
    }
    createController() {
        return this._createController();
    }
    /**
     * Launches the browser using provided launch context.
     */
    async launch(launchContext = this.createLaunchContext()) {
        const { proxyUrl } = launchContext;
        if (proxyUrl) {
            await this._addProxyToLaunchOptions(launchContext);
        }
        return this._launch(launchContext);
    }
    /**
     * @private
     */
    // @ts-expect-error Give runtime error as well as compile time
    // eslint-disable-next-line space-before-function-paren, @typescript-eslint/no-unused-vars, max-len
    _addProxyToLaunchOptions(launchContext) {
        (0, utils_1.throwImplementationNeeded)('_addProxyToLaunchOptions');
    }
    /**
     * @private
     */
    // @ts-expect-error Give runtime error as well as compile time
    // eslint-disable-next-line space-before-function-paren, @typescript-eslint/no-unused-vars, max-len
    _launch(launchContext) {
        (0, utils_1.throwImplementationNeeded)('_launch');
    }
    /**
     * @private
     */
    // @ts-expect-error Give runtime error as well as compile time
    // eslint-disable-next-line space-before-function-paren
    _createController() {
        (0, utils_1.throwImplementationNeeded)('_createController');
    }
}
exports.BrowserPlugin = BrowserPlugin;
//# sourceMappingURL=browser-plugin.js.map