"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PuppeteerPlugin = void 0;
const browser_plugin_1 = require("../abstract-classes/browser-plugin");
const logger_1 = require("../logger");
const utils_1 = require("../utils");
const puppeteer_controller_1 = require("./puppeteer-controller");
const PROXY_SERVER_ARG = '--proxy-server=';
class PuppeteerPlugin extends browser_plugin_1.BrowserPlugin {
    async _launch(launchContext) {
        var _a;
        const { launchOptions, userDataDir, useIncognitoPages, proxyCredentials, proxyUrl, } = launchContext;
        const finalLaunchOptions = {
            ...launchOptions,
            userDataDir: (_a = launchOptions === null || launchOptions === void 0 ? void 0 : launchOptions.userDataDir) !== null && _a !== void 0 ? _a : userDataDir,
        };
        let browser = await this.library.launch(finalLaunchOptions);
        browser.on('targetcreated', async (target) => {
            try {
                const page = await target.page();
                if (page) {
                    page.on('error', (error) => {
                        logger_1.log.exception(error, 'Page crashed.');
                        page.close().catch(utils_1.noop);
                    });
                }
            }
            catch (error) {
                logger_1.log.exception(error, 'Failed to retrieve page from target.');
            }
        });
        const newPage = browser.newPage.bind(browser);
        browser = new Proxy(browser, {
            get: (target, property) => {
                if (property === 'newPage') {
                    return (async (...args) => {
                        let page;
                        if (useIncognitoPages) {
                            const context = await browser.createIncognitoBrowserContext({
                                proxyServer: proxyUrl,
                            });
                            page = await context.newPage(...args);
                        }
                        else {
                            page = await newPage(...args);
                        }
                        if (proxyCredentials) {
                            await page.authenticate(proxyCredentials);
                        }
                        return page;
                    });
                }
                return target[property];
            },
        });
        return browser;
    }
    _createController() {
        return new puppeteer_controller_1.PuppeteerController(this);
    }
    async _addProxyToLaunchOptions(launchContext) {
        var _a;
        (_a = launchContext.launchOptions) !== null && _a !== void 0 ? _a : (launchContext.launchOptions = {});
        const { launchOptions, proxyUrl } = launchContext;
        if (proxyUrl) {
            const url = new URL(proxyUrl);
            if (url.username || url.password) {
                launchContext.proxyCredentials = {
                    username: decodeURIComponent(url.username),
                    password: decodeURIComponent(url.password),
                };
            }
            const proxyArg = `${PROXY_SERVER_ARG}${url.origin}`;
            if (Array.isArray(launchOptions.args)) {
                launchOptions.args.push(proxyArg);
            }
            else {
                launchOptions.args = [proxyArg];
            }
        }
    }
}
exports.PuppeteerPlugin = PuppeteerPlugin;
//# sourceMappingURL=puppeteer-plugin.js.map