"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPostPageCreateHook = exports.createPrePageCreateHook = exports.createFingerprintPreLaunchHook = void 0;
const __1 = require("..");
const utils_1 = require("./utils");
function createFingerprintPreLaunchHook(browserPool) {
    const { fingerprintGenerator, fingerprintCache, fingerprintsOptions: { fingerprintGeneratorOptions, }, } = browserPool;
    return (_pageId, launchContext) => {
        const { useIncognitoPages, launchOptions, proxyUrl } = launchContext;
        // If no options are passed we try to pass best default options as possible to match browser and OS.
        const fingerprintGeneratorFinalOptions = fingerprintGeneratorOptions || (0, utils_1.getGeneratorDefaultOptions)(launchContext);
        let fingerprint;
        if (proxyUrl && (fingerprintCache === null || fingerprintCache === void 0 ? void 0 : fingerprintCache.has(proxyUrl))) {
            fingerprint = fingerprintCache.get(proxyUrl);
        }
        else if (proxyUrl) {
            fingerprint = fingerprintGenerator.getFingerprint(fingerprintGeneratorFinalOptions).fingerprint;
            fingerprintCache === null || fingerprintCache === void 0 ? void 0 : fingerprintCache.set(proxyUrl, fingerprint);
        }
        else {
            fingerprint = fingerprintGenerator.getFingerprint(fingerprintGeneratorFinalOptions).fingerprint;
        }
        launchContext.extend({ fingerprint });
        if (useIncognitoPages) {
            return;
        }
        const { userAgent, screen } = fingerprint;
        // @ts-expect-error I have no idea why I cannot assign property to unknown object.
        launchOptions.userAgent = userAgent;
        // @ts-expect-error Same as above.
        launchOptions.viewport = {
            width: screen.width,
            height: screen.height,
        };
    };
}
exports.createFingerprintPreLaunchHook = createFingerprintPreLaunchHook;
;
function createPrePageCreateHook() {
    return (_pageId, browserController, pageOptions) => {
        const { launchContext, browserPlugin } = browserController;
        const fingerprint = launchContext.fingerprint;
        if (launchContext.useIncognitoPages && browserPlugin instanceof __1.PlaywrightPlugin && pageOptions) {
            pageOptions.userAgent = fingerprint.userAgent;
            pageOptions.viewport = {
                width: fingerprint.screen.width,
                height: fingerprint.screen.height,
            };
        }
    };
}
exports.createPrePageCreateHook = createPrePageCreateHook;
;
function createPostPageCreateHook(fingerprintInjector) {
    return async (page, browserController) => {
        const { browserPlugin, launchContext } = browserController;
        const fingerprint = launchContext.fingerprint;
        if (browserPlugin instanceof __1.PlaywrightPlugin) {
            const { useIncognitoPages, isFingerprintInjected } = launchContext;
            if (isFingerprintInjected) {
                // If not incognitoPages are used we would add the injection script over and over which could cause memory leaks.
                return;
            }
            const context = page.context();
            await fingerprintInjector.attachFingerprintToPlaywright(context, fingerprint);
            if (!useIncognitoPages) {
                // There is only one context
                // We would add the injection script over and over which could cause memory/cpu leaks.
                launchContext.extend({ isFingerprintInjected: true });
            }
        }
        else if (browserPlugin instanceof __1.PuppeteerPlugin) {
            await fingerprintInjector.attachFingerprintToPuppeteer(page, fingerprint);
        }
    };
}
exports.createPostPageCreateHook = createPostPageCreateHook;
;
//# sourceMappingURL=hooks.js.map