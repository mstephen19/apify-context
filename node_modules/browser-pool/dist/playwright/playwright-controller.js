"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaywrightController = void 0;
const timeout_1 = require("@apify/timeout");
const browser_controller_1 = require("../abstract-classes/browser-controller");
class PlaywrightController extends browser_controller_1.BrowserController {
    normalizeProxyOptions(proxyUrl, pageOptions) {
        var _a;
        if (!proxyUrl) {
            return {};
        }
        const url = new URL(proxyUrl);
        const username = decodeURIComponent(url.username);
        const password = decodeURIComponent(url.password);
        return {
            proxy: {
                server: url.origin,
                username,
                password,
                bypass: (_a = pageOptions === null || pageOptions === void 0 ? void 0 : pageOptions.proxy) === null || _a === void 0 ? void 0 : _a.bypass,
            },
        };
    }
    async _newPage(contextOptions) {
        if (contextOptions !== undefined && !this.launchContext.useIncognitoPages) {
            throw new Error('A new page can be created with provided context only when using incognito pages.');
        }
        const page = await this.browser.newPage(contextOptions);
        (0, timeout_1.tryCancel)();
        page.once('close', () => {
            this.activePages--;
        });
        return page;
    }
    async _close() {
        await this.browser.close();
    }
    async _kill() {
        // TODO: We need to be absolutely sure the browser dies.
        await this.browser.close(); // Playwright does not have the browser child process attached to normal browser server
    }
    _getCookies(page) {
        const context = page.context();
        return context.cookies();
    }
    _setCookies(page, cookies) {
        const context = page.context();
        return context.addCookies(cookies);
    }
}
exports.PlaywrightController = PlaywrightController;
//# sourceMappingURL=playwright-controller.js.map