/// <reference types="node" />
import { EventEmitter } from 'events';
import type { BrowserContext, Browser as PlaywrightBrowser } from 'playwright';
export interface BrowserOptions {
    browserContext: BrowserContext;
    version: string;
}
/**
 * Browser wrapper created to have consistent API with persistent and non-persistent contexts.
 */
export declare class Browser extends EventEmitter implements PlaywrightBrowser {
    private _browserContext;
    private _version;
    private _isConnected;
    constructor(options: BrowserOptions);
    close(): Promise<void>;
    contexts(): BrowserContext[];
    isConnected(): boolean;
    version(): string;
    newPage(...args: Parameters<BrowserContext['newPage']>): ReturnType<BrowserContext['newPage']>;
    newContext(): Promise<never>;
    newBrowserCDPSession(): Promise<never>;
    startTracing(): Promise<never>;
    stopTracing(): Promise<never>;
}
//# sourceMappingURL=browser.d.ts.map